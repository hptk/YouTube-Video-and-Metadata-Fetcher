For the ID-Fetching algorithm we utilize the search.list API endpoint, which returns
a collection of search results for given parameters specified in the request.

There are 
Altought the API's search.list endpount provides a lot of different parameters, we had to solve some problems

The YouTube Data API v3's video search endpoint has a lot of different parameters for requesting a list of
videos matching these parameters. For example the user can define . 
A full list of the parameters can be found here https://developers.google.com/youtube/v3/docs/search/list

The search.list response contains a maximum of 50 videos per page and a total of 10 pages. This restrictions leads to
the fact that for a single static parameter set there is a maximum of 500 video provided by the API. To access the total 500 videos,
the 10 pages must be iterated, each iteration utilizing a new request which results in a total of 10 requests and 1000 quota unit costs.

The main problem with the 500 video limit for a static parameter set is, that it can not be a good sample. There might be a lot of other videos
which match the requested parameter, but YouTube restricts his response to the same 500 videos, even if the same request as been performed multiple times. 
Indeed there is some small variation of each request's response measurable, but only a few videos change and therefore it can be neglected.

Our approach of receiving an unbiased sample of videos from the API was to have a static parameter set with some
variable parameter which allows us in theory to get all videos from YouTube. The user then has the possibility to select a subsample of all the
videos available on the YouTube API for further research. After all videos are fetched, the user has a lot of metadata

For the next section we have to define some words.
A "static parameter set" is meant to be a global search request, like "All videos which are related to the word 'fun', are 2D and have a high video quality"
A "variable parameter" is a parameter which can be changed for every single request, without changing the meaning of the "static parameter set", but gives us 
the ability to create many different variations of the "static parameter set" in order to exceed the 500 videos maximum.
 
There are only four real variable
parameters in the search.list API endpoint available. All other parameters are in some kind static and would result to a maximum of 500 videos.

channelid | indicates that the API response should only contain resources created by the channel
location+locationRadius | defines a circular geographic area and restricts the search to videos that specify a geographic location in their metadata which falls within the requested area
q | specifies a query term to search for
publishedAfter/publishedBefore


location+locationRadius
The problem with this parameter is, that not every video on YouTube has specified the location in the metadata.
Evaluating some hundred thousands of video's metadata has shown that only 5-10% of the videos has specified a location in their metadata.
We can not verify that this is the average on all videos uploaded on YouTube, but the existens of non-location related videos indicates that
this parameter is not a good choice to receive an unbiased sample of videos.

channelId
In order to use this parameter, we would need to have a list of all channels available on YouTube. This is as much difficult as
getting all videos of YouTube and therefore this parameter does not suit our needs. Some channels also have some thousands videos uploaded
and with a static parameter set and only the variable channelId, the API response would have a maximum of 500 videos for these channels.

q
Using this parameter as variable would lead to not having this parameter in a static set and therefore it becomes impossible to receive
all videos for a single search term. We wanted to have this parameter in a static way in order to provide results
for search queries like "All videos which are related to the search team 'fun'"
Although if you try to iterate over this parameter, a huge list of keywords would be needed and it does not scale well since the iteration has
to be done for every single API search. A search like "All videos which are 3D" with a keyword list containing 100.000 words, would result to
perform 100.000 requests and costs 1 million units whereas there are only a few 3D videos on YouTube.

publishedAfter/publishedBefore
Those parameters suit most to receive an unbiased sample of YouTube videos. They are completely independent from the other parameters and
therefore they allow us to modify them without affecting the other parameters and the result of the request.


In our tool, we provide the full list of all search.list parameters which can optional be set in a static way.


After identifying publishedBefore/After as the most suitable variable parameters for our intend and to exceed the 500 video maximum limit for
a "static parameter set", we had to think about how to utilize them in an algorithm.

The first thought was to let the user define a "static parameter set" and a period of time in which the search should be performed.
The fir

We have experienced that the API in some situations tells there are multiple pages even if there are less then 50 videos and each page
contains the exactly same videos.
So iterating over the pages a single static parameter set has, became a bad idea because we did not know if there are indeed new videos
on the next page or Google just wants us to reduce the total results we get and maximize the quota unit costs spent.
While creating the tool, there were 2305 open issues associated to the YouTube API and some of them were related to
the behaviors we have experienced.



The IDFetch and other YouTube API related algorithm are utilizing HTTP persistent connections, which allows to use a single TCP connection to
send and receive multiple HTTP requests and responses.